#!/bin/zsh

# https://github.com/ivalx1s/xcgen/
# MIT License
#
# (License text remains the same)
#
# XCGEN – Automated Bootstrapping for XcodeGen-based Xcode Workflow
#
# Usage:
#   xcgen bootstrap      : Prepare the environment, install tools, and setup submodules
#   xcgen fetch          : Update dependencies and submodules
#   xcgen cleanall       : Clean all caches (Xcode, SPM, Xcodegen)
#   xcgen cleandd        : Clean DerivedData only
#   xcgen cleanxc        : Clean Xcode caches (DerivedData, Xcode Caches)
#   xcgen cleanspm       : Clean SPM caches
#
# After running `xcgen bootstrap`, you can simply run `xcgen` to regenerate and open the project.
#

set -euo pipefail
trap 'echo "An unexpected error occurred. Exiting."; exit 1' ERR

PROJECT_NAME="Anteater"
PROJECT_DIR="$PWD"

usage() {
    echo "Usage: $0 [subcommand]"
    echo "Available subcommands:"
    echo "  bootstrap   Prepare environment, install Mint & dependencies"
    echo "  fetch       Update dependencies and submodules"
    echo "  cleanall    Remove all caches (SPM, Xcode, Xcodegen)"
    echo "  cleandd     Remove DerivedData only"
    echo "  cleanxc     Remove Xcode caches (DerivedData, Xcode caches)"
    echo "  cleanspm    Remove SPM caches"
    echo "  help        Show this help message"
    echo
    echo "If no subcommand is provided, the script will generate the project and open it."
}

# Check if homebrew is installed
if ! command -v brew &>/dev/null; then
    echo "Homebrew is not installed. Please install it first:"
    echo "/bin/bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
    exit 1
fi

export PATH="/opt/homebrew/bin:$PATH"

# Check if realpath is available
if ! command -v realpath &>/dev/null; then
    echo "'realpath' is not available. Please install 'coreutils':"
    echo "brew install coreutils"
    exit 1
fi

# Ensure Mint is installed
if ! command -v mint &>/dev/null; then
    brew install mint
fi
export PATH="$HOME/.mint/bin:$PATH"

# A function to clean SPM caches
clean_spm() {
    echo "⚙️ Cleaning SPM caches..."
    rm -rf ~/Library/org.swift.swiftpm
    rm -rf ~/Library/Caches/org.swift.swiftpm
    echo "✅ Done"
}

# A function to clean Xcode caches
clean_xc() {
    echo "⚙️ Cleaning Xcode caches..."
    rm -rf ~/Library/Developer/Xcode/DerivedData
    rm -rf ~/Library/Caches/com.apple.dt.Xcode
    echo "✅ Done"
}

# A function to clean Xcodegen caches
clean_xcodegen() {
    echo "⚙️ Cleaning Xcodegen caches..."
    rm -rf ~/.xcodegen/cache/
    echo "✅ Done"
}

# Bootstrap logic
bootstrap() {
    # Consider if removing ~/.mint is always desired
    rm -rf ~/.mint/
    mint bootstrap --link
    if ! command -v xcgbootstrap &>/dev/null; then
        echo "xcgbootstrap not found after mint bootstrap. Check your Mintfile."
        exit 1
    fi
    xcgbootstrap submodules "$PROJECT_NAME.xcodeprojless"
}

# Fetch logic
fetch() {
    echo "⚙️ Cloning dependencies..."
    xcgbootstrap submodules "$PROJECT_NAME.xcodeprojless"
}

# Main logic
case "${1:-}" in
    bootstrap)
        bootstrap
        exit 0
        ;;
    fetch)
        fetch
        exit 0
        ;;
    cleanall)
        echo "⚙️ Cleaning all caches..."
        clean_spm
        clean_xc
        clean_xcodegen
        echo "✅ All cleaned"
        exit 0
        ;;
    cleandd)
        echo "⚙️ Cleaning DerivedData..."
        rm -rf ~/Library/Developer/Xcode/DerivedData
        echo "✅ Done"
        exit 0
        ;;
    cleanxc)
        clean_xc
        exit 0
        ;;
    cleanspm)
        clean_spm
        exit 0
        ;;
    help|-h|--help)
        usage
        exit 0
        ;;
    "")
        # No subcommand, generate and open project
        ;;
    *)
        echo "Unrecognized subcommand: $1"
        usage
        exit 1
        ;;
esac

# Ensure Packages directory exists if needed
if [[ ! -d "../Packages" ]]; then
    xcgbootstrap submodules "$PROJECT_NAME.xcodeprojless"
fi

if ! command -v xcodegen &>/dev/null; then
    echo "xcodegen not found. Please ensure it is installed via Mint or Homebrew."
    exit 1
fi

# Generate and open the Xcode project
xcodegen generate --spec "$PROJECT_NAME.xcodeprojless"
echo "🕐 $(date '+%Y-%m-%d %H:%M:%S')"
open "$PROJECT_NAME.xcodeproj"